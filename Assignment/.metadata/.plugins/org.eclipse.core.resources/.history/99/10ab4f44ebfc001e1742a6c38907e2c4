package Assignment.Game;

import javafx.scene.canvas.GraphicsContext;
import javafx.scene.image.Image;

public class Num1 extends GameObject {

    private enum Direction {
        LEFT, RIGHT, UP, DOWN, NONE
    }

    private Direction currentDirection = Direction.NONE;
    private boolean initialisedDirection = false;

    private static final int TILE_SIZE = 40;

    public Num1(double centerX, double centerY, double tileSize, GraphicsContext gc) {
        super(centerX, centerY, tileSize, tileSize, gc);
        img = new Image(Num1.class.getResource("num1.png").toExternalForm());
        update();
        this.speedX = 1;
        this.speedY = 1;
    }

    public void update() {
        if (!initialisedDirection) {
            initialiseDirection();
        } else {
            updateBehaviour();
        }
        super.update();
    }

    private void initialiseDirection() {
        if (!isWall(x, y + 2 * Game.getTileSize())) {
            currentDirection = Direction.DOWN;
        } else if (!isWall(x, y - 2 * Game.getTileSize())) {
            currentDirection = Direction.UP;
        } else if (!isWall(x - 2 * Game.getTileSize(), y)) {
            currentDirection = Direction.LEFT;
        } else if (!isWall(x + 2 * Game.getTileSize(), y)) {
            currentDirection = Direction.RIGHT;
        }

        if (currentDirection != Direction.NONE) {
            initialisedDirection = true;
        }
    }

    private void updateBehaviour() {
        switch (currentDirection) {
            case DOWN:
                if (!isWall(x, y + 2 * Game.getTileSize())) {
                    moveDown();
                } else {
                    currentDirection = Direction.UP;
                }
                break;
            case UP:
                if (!isWall(x, y - 2 * Game.getTileSize())) {
                    moveUp();
                } else {
                    currentDirection = Direction.DOWN;
                }
                break;
            case LEFT:
                if (!isWall(x - 2 * Game.getTileSize(), y)) {
                    moveLeft();
                } else {
                    currentDirection = Direction.RIGHT;
                }
                break;
            case RIGHT:
                if (!isWall(x + 2 * Game.getTileSize(), y)) {
                    moveRight();
                } else {
                    currentDirection = Direction.LEFT;
                }
                break;
            default:
                break;
        }
    }

    public double getX() {
        return x;
    }

    public double getY() {
        return y;
    }

    protected boolean isWall(double posX, double posY) {
        int gridX = (int) (posX / TILE_SIZE);
        int gridY = (int) (posY / TILE_SIZE);

        if (gridX < 0 || gridX >= Game.getNumTilesX() || gridY < 0 || gridY >= Game.getNumTilesY()) {
            return true; // If out of bounds, consider it as a wall
        }

        return Game.getMaze()[gridX][gridY] == 1;
    }
}
