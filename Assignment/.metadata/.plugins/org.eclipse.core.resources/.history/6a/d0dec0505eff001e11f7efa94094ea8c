package Assignment.Game;

import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.scene.input.KeyEvent;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Random;

public class Game extends Application {

    private static final int TILE_SIZE = 40;
    private static final int NUM_TILES_X = 20;
    private static final int NUM_TILES_Y = 15;
    private static final int NUM_NUM1_INSTANCES = 10;

    private static int[][] maze = new int[NUM_TILES_X][NUM_TILES_Y];

    Pane root;
    Scene scene;
    Canvas canvas;
    GraphicsContext gc;

    AnimationTimer timer;
    Factory factory;
    ArrayList<Enemy> enemyList = new ArrayList<>();
    private ArrayList<Bullet> bullets = new ArrayList<>();

    Player player;
    private Class<? extends Bullet> currentBulletType = Pow0Bullet.class;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        root = new Pane();
        scene = new Scene(root, 800, 600);
        canvas = new Canvas(800, 600);
        gc = canvas.getGraphicsContext2D();
        primaryStage.setScene(scene);
        primaryStage.show();

        generateMap();

        double playerInitialX, playerInitialY;
        do {
            int randomX = (int) (Math.random() * NUM_TILES_X);
            int randomY = (int) (Math.random() * NUM_TILES_Y);
            playerInitialX = randomX * TILE_SIZE + TILE_SIZE / 2;
            playerInitialY = randomY * TILE_SIZE + TILE_SIZE / 2;
        } while (!isValidSpawnPosition(playerInitialX, playerInitialY));

        player = Player.getInstance(this, gc);
        root.getChildren().add(canvas);
        gc.setFill(Color.BLACK);
        gc.fillRect(0, 0, canvas.getWidth(), canvas.getHeight());
        factory = new Factory(gc);

        for (int i = 0; i < NUM_NUM1_INSTANCES; i++) {
            double posX, posY;
            do {
                int randomX = (int) (Math.random() * NUM_TILES_X);
                int randomY = (int) (Math.random() * NUM_TILES_Y);
                posX = randomX * TILE_SIZE + TILE_SIZE / 2;
                posY = randomY * TILE_SIZE + TILE_SIZE / 2;
            } while (!isValidSpawnPosition(posX, posY));
            Num1 num1 = (Num1) factory.createProduct("num1", this, posX, posY, TILE_SIZE);
            enemyList.add(num1);
        }

        timer = new AnimationTimer() {
        	 @Override
        	    public void handle(long now) {
        	        gc.clearRect(0, 0, canvas.getWidth(), canvas.getHeight());
        	        for (Enemy enemy : enemyList) {
        	            enemy.update();
        	            enemy.enemyMovement();
        	        }
        	        player.update();
        	        Iterator<Bullet> bulletIterator = bullets.iterator();
        	        while (bulletIterator.hasNext()) {
        	            Bullet bullet = bulletIterator.next();
        	            bullet.shoot();
        	            if (isBulletOffScreen(bullet) || isWall(bullet.getX(), bullet.getY())) {
        	                bulletIterator.remove();
        	            } else {
        	                boolean hitEnemy = false;
        	                for (Enemy enemy : enemyList) {
        	                    double distance = Math.sqrt(Math.pow(enemy.getX() - bullet.getX(), 2) + Math.pow(enemy.getY() - bullet.getY(), 2));
        	                    if (distance < TILE_SIZE) {
        	                        hitEnemy = true;
        	                        System.out.println("Bullet hit an enemy!");
        	                        break;
        	                    }
        	                }
        	                if (hitEnemy) {
        	                    bulletIterator.remove();
        	                } else {
        	                    ((GameObject) bullet).render();
        	                }
        	            }
        	        }
        	    }
        	};
        timer.start();

        scene.setOnKeyPressed((KeyEvent e) -> {
            switch (e.getCode()) {
                case NUMPAD0:
                    currentBulletType = Pow0Bullet.class;
                    break;
                case NUMPAD1:
                    currentBulletType = Pow1Bullet.class;
                    break;
                case NUMPAD2:
                    currentBulletType = Pow2Bullet.class;
                    break;
                case NUMPAD3:
                    currentBulletType = Pow3Bullet.class;
                    break;
                case LEFT:
                case KP_LEFT:
                    player.moveLeft();
                    break;
                case RIGHT:
                case KP_RIGHT:
                    player.moveRight();
                    break;
                case UP:
                case KP_UP:
                    player.moveUp();
                    break;
                case DOWN:
                case KP_DOWN:
                    player.moveDown();
                    break;
                case SPACE:
                    fireBullet();
                    break;
                default:
                    break;
            }
        });
    }

    private void generateMap() {
        for (int i = 0; i < NUM_TILES_X; i++) {
            for (int j = 0; j < NUM_TILES_Y; j++) {
                maze[i][j] = 1;
            }
        }

        Random rand = new Random();
        int startX = rand.nextInt(NUM_TILES_X);
        int startY = rand.nextInt(NUM_TILES_Y);
        maze[startX][startY] = 0;

        int[] dX = {-1, 1, 0, 0};
        int[] dY = {0, 0, -1, 1};
        ArrayList<int[]> walls = new ArrayList<>();
        addWalls(startX, startY, walls, dX, dY);

        while (!walls.isEmpty()) {
            int[] wall = walls.remove(rand.nextInt(walls.size()));
            int x = wall[0];
            int y = wall[1];
            int cellsWithPaths = 0;
            int[] cell = {-1, -1};
            for (int k = 0; k < 4; k++) {
                int nx = x + dX[k];
                int ny = y + dY[k];
                if (nx >= 0 && nx < NUM_TILES_X && ny >= 0 && ny < NUM_TILES_Y && maze[nx][ny] == 0) {
                    cellsWithPaths++;
                    if (cellsWithPaths == 1) {
                        cell[0] = nx;
                        cell[1] = ny;
                    } else {
                        break;
                    }
                }
            }
            if (cellsWithPaths == 1) {
                maze[x][y] = 0;
                addWalls(x, y, walls, dX, dY);
            }
        }

        for (int ix = 0; ix < NUM_TILES_X; ix++) {
            for (int jy = 0; jy < NUM_TILES_Y; jy++) {
                Rectangle tile = new Rectangle(ix * TILE_SIZE, jy * TILE_SIZE, TILE_SIZE, TILE_SIZE);
                tile.setFill(maze[ix][jy] == 1 ? Color.DARKSLATEBLUE : Color.BLACK);
                root.getChildren().add(tile);
            }
        }
    }

    private void addWalls(int x, int y, ArrayList<int[]> walls, int[] dX, int[] dY) {
        for (int i = 0; i < 4; i++) {
            int nx = x + dX[i];
            int ny = y + dY[i];
            if (nx >= 0 && nx < NUM_TILES_X && ny >= 0 && ny < NUM_TILES_Y && maze[nx][ny] == 1) {
                walls.add(new int[]{nx, ny});
            }
        }
    }

    public static int getTileSize() {
        return TILE_SIZE;
    }

    public static int getNumTilesX() {
        return NUM_TILES_X;
    }

    public static int getNumTilesY() {
        return NUM_TILES_Y;
    }

    public static int[][] getMaze() {
        return maze;
    }

    public boolean isValidSpawnPosition(double posX, double posY) {
        int gridX = (int) (posX / TILE_SIZE);
        int gridY = (int) (posY / TILE_SIZE);

        if (gridX < 0 || gridX >= NUM_TILES_X || gridY < 0 || gridY >= NUM_TILES_Y) {
            return false;
        }

        return maze[gridX][gridY] == 0 && !isOccupied(posX, posY);
    }

    private boolean isOccupied(double posX, double posY) {
        for (Enemy enemy : enemyList) {
            double distance = Math.sqrt(Math.pow((enemy.getX() - posX), 2) + Math.pow((enemy.getY() - posY), 2));
            if (distance < 3 * TILE_SIZE) {
                return true;
            }
        }
        return false;
    }

    private boolean isBulletOffScreen(Bullet bullet) {
        return bullet.getX() < 0 || bullet.getX() > canvas.getWidth() || bullet.getY() < 0 || bullet.getY() > canvas.getHeight();
    }

    private void fireBullet() {
        double bulletX = player.getX();
        double bulletY = player.getY();
        Bullet bullet = Bullet.builder()
                              .setPosition(bulletX, bulletY)
                              .setGraphicsContext(gc)
                              .setBulletType(currentBulletType)
                              .build();
        if (bullet != null) {
            ((GameObject) bullet).setDirection(player.getLastDirection());
            bullets.add(bullet);
        } else {
            System.err.println("Failed to create bullet instance.");
        }
    }

    protected boolean isWall(double newX, double newY) {
        double canvasWidth = gc.getCanvas().getWidth();
        double canvasHeight = gc.getCanvas().getHeight();
        if (newX < 0 || newX >= canvasWidth || newY < 0 || newY >= canvasHeight) {
            return true;
        }

        int gridX = (int) (newX / Game.getTileSize());
        int gridY = (int) (newY / Game.getTileSize());

        return gridX < 0 || gridX >= Game.getNumTilesX() || gridY < 0 || gridY >= Game.getNumTilesY() || Game.getMaze()[gridX][gridY] == 1;
    }
}
