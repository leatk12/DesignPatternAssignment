package Assignment.Game;

import javafx.scene.canvas.GraphicsContext;
import javafx.scene.image.Image;

public class GameObject {
    protected Image img;
    protected double x, y;
    protected GraphicsContext gc;
    protected double width;
    protected double height;

    protected double speedX = 8;
    protected double speedY = 8;

    public GameObject(double x, double y, double width, double height, GraphicsContext gc) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
        this.gc = gc;
    }

    public void update() {
        if (img != null)
            gc.drawImage(img, x - width / 2, y - height / 2, width, height);
    }

    public void moveLeft() {
        if (!isWall(x - speedX, y)) {
            x -= speedX;
        }
    }

    public void moveRight() {
        if (!isWall(x + speedX, y)) {
            x += speedX;
        }
    }

    public void moveUp() {
        if (!isWall(x, y - speedY)) {
            y -= speedY;
        }
    }

    public void moveDown() {
        if (!isWall(x, y + speedY)) {
            y += speedY;
        }
    }

    protected boolean isWall(double newX, double newY) {
        int gridX = (int) (newX / Game.getTileSize());
        int gridY = (int) (newY / Game.getTileSize());

        // Check if the calculated indices are within bounds
        if (gridX < 0 || gridX >= Game.getNumTilesX() || gridY < 0 || gridY >= Game.getNumTilesY()) {
            // Return true if out of bounds to prevent accessing invalid indices
            return true;
        }

        return Game.getMaze()[gridX][gridY] == 1;
    }
    
    
    // Methods to be overridden by subclasses for specific behavior
    public void updateBehavior() {
        // Default behavior is to do nothing
    }
}