package Assignment.Game;
import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;

import java.util.ArrayList;
import java.util.Random;

public class Game extends Application {

	private static final int TILE_SIZE =40;
	private static final int NUM_TILES_X = 20;
	private static final int NUM_TILES_Y = 15;

	//Array holding the tiles
	// 0 is a path and 1 is a wall
	private int[][] maze = new int[NUM_TILES_X][NUM_TILES_Y];

	Pane root;
	Scene scene;
	Canvas canvas;
	GraphicsContext gc;

	AnimationTimer timer;
	Factory factory;
	ArrayList<Num1> num1List = new ArrayList<>();

	Player player;



	public static void main(String[] args) {
		launch(args);
	}

	@Override
	public void start(Stage primaryStage) throws Exception {
		Pane root = new Pane();
		scene = new Scene(root, 800, 600);
		canvas = new Canvas(800, 600);
		gc = canvas.getGraphicsContext2D();
		primaryStage.setScene(scene);

		primaryStage.show();

		generateMap(root);

		player = Player.getInstance(canvas.getWidth() / 2, canvas.getHeight() - 100, gc);

		root.getChildren().add(canvas);
		gc.setFill(Color.BLACK);
		gc.fillRect(0, 0, canvas.getWidth(), canvas.getHeight());

		factory = new Factory(gc);

		timer = new AnimationTimer() {
			long lastSpawnTime = 0;

			@Override
			public void handle(long now) {
				gc.clearRect(0, 0, canvas.getWidth(), canvas.getHeight());

				if (System.nanoTime() - lastSpawnTime > 500_000_000)  {
					double randomX = Math.random() * (canvas.getWidth() - 30);
					Num1 num1 = (Num1) factory.createProduct("num1", randomX, -30);
					num1List.add(num1);
					lastSpawnTime = System.nanoTime();
				}

				for (int i=0; i < num1List.size(); i++)  {
					Num1 num1 = num1List.get(i);
					num1.update();

					if (num1.getY() > canvas.getHeight())  {
						num1List.remove(num1);
					}
				}
				player.update();
			}

		};
		timer.start();


		scene.setOnKeyPressed((KeyEvent e)  -> {
			switch (e.getCode())  {
			case LEFT:
				if(!isWall(player.getX() - player.getSpeedX(), player.getY())) player.moveLeft();
				break;
			case RIGHT:
				if (!isWall(player.getX() + player.getSpeedX(), player.getY())) player.moveRight();
				break;
			case UP:
				if (!isWall(player.getX(), player.getY() - player.getSpeedY())) player.moveUp();
				break;
			case DOWN:
				if (!isWall(player.getX(), player.getY() + player.getSpeedY())) player.moveDown();
				break;
			default:
				break;

			}
		});
	}

	private void generateMap(Pane root)  {
		//Using prims algortithm to generate a maze
		//The maze array will be filled with walls (1's) and paths (0's)
		for (int i = 0; i < NUM_TILES_X; i++  ) {
			for (int j = 0; j < NUM_TILES_Y; j++)  {
				maze[i][j] = 1;  // 1 indicates a wall will be generated
			}
		}

		Random rand = new Random();
		int startX = rand.nextInt(NUM_TILES_X);
		int startY = rand.nextInt(NUM_TILES_Y);
		maze[startX][startY] = 0;  //0 Indicates a path;

		//Direction vectors for moving inside the grid (up, down, left and right)
		int[] dX = {-1, 1, 0, 0};
		int[] dY = {0, 0, -1, 1};

		//ArrayList which will store the walls which are potential paths
		ArrayList<int[]> walls = new ArrayList<>();
		addWalls(startX, startY, walls, dX, dY);

		while (!walls.isEmpty())  {
			int[] wall = walls.remove(rand.nextInt(walls.size()));
			int x = wall[0];
			int y = wall[1];

			//Test whether we can create a path by removing this wall
			int cellsWithPaths = 0;
			int[] cell = {-1, 1}; //Store the cell which has a path already
			for (int k = 0; k < 4; k++)  {
				int nx = x +dX[k];
				int ny = y + dY[k];
				//Test whether a cell is within bounds and if the cell is already a path
				if (nx >= 0 && nx < NUM_TILES_X && ny >= 0 && ny < NUM_TILES_Y && maze[nx][ny] == 0)  {
					cellsWithPaths++;
					if (cellsWithPaths == 1)  {
						cell[0] = nx;
						cell[1] = ny;
					} else {
						break;
					}

				}
			}
			
			if (cellsWithPaths == 1)  {  //If only one adjacent cell is path
				maze[x][y] = 0; //Convert the wall to a path
				addWalls(x, y, walls, dX, dY);
			}
			//Draw the maze
			for (int ix = 0; ix < NUM_TILES_X; ix++)  {
				for (int jy = 0; jy < NUM_TILES_Y; jy++)  {
					Rectangle tile = new Rectangle(ix * TILE_SIZE, jy * TILE_SIZE, TILE_SIZE, TILE_SIZE);
					tile.setFill(maze[ix][jy] == 1 ? Color.DARKSLATEBLUE : Color.BLACK);
					root.getChildren().add(tile);
				}
			}
		}

	}




	private void addWalls(int x, int y, ArrayList<int[]> walls, int[] dX, int[] dY) {
		// TODO Auto-generated method stub
		
		for (int i = 0; i < 4; i++)  {
			int nx = x + dX[i];
			int ny = y + dY[i];
			//Add a wall within the bounds and the tile is a wall
			if(nx >= 0 && nx < NUM_TILES_X && ny >= 0 && ny < NUM_TILES_Y && maze[nx][ny] == 1)  {
				walls.add(new int[] {nx, ny});
			}
		}

	}

	private boolean isWall(double x, double y)  {
		int gridX = (int) x / TILE_SIZE;
		int gridY = (int) y / TILE_SIZE;
		return maze[gridX][gridY]  == 1;
	}
}
