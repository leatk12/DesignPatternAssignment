package Assignment.Game;

import javafx.application.Platform;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.image.Image;

public class Player extends GameObject implements GameObjectBehaviour{
private String lastDirection = "RIGHT";
//Variable which holds the number of player lives	
private int lives = 3;
	
    private static Player instance;

    private Player(Game game, double x, double y, double width, double height, GraphicsContext gc) {
        super(game, x, y, width, height,  gc);
        this.name = "default";
        this.score = 0;
        // TODO Auto-generated constructor stub
        this.img = new Image(Player.class.getResource("iceT.png").toExternalForm());
        update();
    }

    public static synchronized Player getInstance(Game game, GraphicsContext gc)  {
        if (instance == null)  {
            double x, y;
            int tileX, tileY;
            do {
                // Generate random coordinates
                x = Math.random() * Game.getNumTilesX() * Game.getTileSize();
                y = Math.random() * Game.getNumTilesY() * Game.getTileSize();
                // Convert coordinates to tile indices
                tileX = (int) (x / Game.getTileSize());
                tileY = (int) (y / Game.getTileSize());
            } while (!game.isValidSpawnPosition(x, y));

            // Set the position within the center of the path tile
            x = tileX * Game.getTileSize() + Game.getTileSize() / 2;
            y = tileY * Game.getTileSize() + Game.getTileSize() / 2;

            // Create the player instance
            instance = new Player(game, x, y, 40, 40, gc);
        }
        return instance;
    }

    
    
    

    private String name;
    private int score;

    //Getters and setters
    public String getLastDirection()  {
		return lastDirection;
	}
    
    
    /**
     * 
     * @return
     * 
     * A method which returns the number of lives a player has
     */
    public int getLives()  {
    	return lives;
    }
    
    
    /**
     * A method which decrements the number of lives a player has
     * tests whether the lives a player has are less than or equal to zero and if so calls the showGameOver method
     */
    public void decrementLives()  {
    	lives--;
    	if (lives <= 0)  {
    		game.showGameOver();
    	}
    }
    
    
    public String getName()  {
        return name;
    }

    public void setName(String name)  {
        this.name = name;
    }

    public int getScore()  {
        return score;

    }

    public void setScore(int score)  {
        this.score = score;
    }

    //Method to increment score
    public void incrementScore()  {
        score++;
    }

    //Method to reset the score
    public void resetScore()  {
        score = 0;
    }

    //Getters for player movement
    public double getX()  {
        return x;
    }

    public double getY()  {
        return y;
    }

    public double getSpeedX()  {
        return speedX;
    }

    public double getSpeedY()  {
        return speedY;
    }
    
    
    
    @Override
    public void moveLeft()  {
    	super.moveLeft();
    	lastDirection ="LEFT";
    }
    
    @Override
    public void moveRight()  {
    	super.moveRight();
    	lastDirection = "RIGHT";
    }
    
    @Override
    public void moveUp()  {
    	super.moveUp();
    lastDirection = "UP";
    }
    
    @Override
    public void moveDown()  {
    	super.moveDown();
    	lastDirection = "DOWN";
    }
    
    

    public void update() {
        double playerWidth = 30;
        double playerHeight = 40;

        if (img != null)
            gc.drawImage(img, x- width / 2, y - height /2, width, height);
    }

	@Override
	public void updateBehaviour() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void enemyMovement() {
		// TODO Auto-generated method stub
		
	}
	
	
	 // Method to check if the player intersects with an enemy
    public boolean intersects(Enemy enemy) {
        // Get the bounding boxes of the player and enemy
        double playerLeft = x - width / 2;
        double playerRight = x + width / 2;
        double playerTop = y - height / 2;
        double playerBottom = y + height / 2;

        double enemyLeft = enemy.getX() - enemy.getWidth() / 2;
        double enemyRight = enemy.getX() + enemy.getWidth() / 2;
        double enemyTop = enemy.getY() - enemy.getHeight() / 2;
        double enemyBottom = enemy.getY() + enemy.getHeight() / 2;

        // Check for intersection
        return playerLeft < enemyRight &&
               playerRight > enemyLeft &&
               playerTop < enemyBottom &&
               playerBottom > enemyTop;
    }
	
	
	
	
	


	public void setX(double x) {
		
		this.x = x;
	}
	
	public void setY(double y)  {
		this.y = y;
	}
	
	public void resetLives(int lives)
	{
		this.lives = lives;
	}
	
	
	public void incrementPlayerScore(Enemy enemy) {
	    if (enemy instanceof Num1) {
	        setScore(getScore() + 10);  // For Num1, increase score by 10
	    } else if (enemy instanceof Num2) {
	        setScore(getScore() + 15);  // For Num2, increase score by 15
	    } else if (enemy instanceof Num4) {
	        setScore(getScore() + 20);  // For Num4, increase score by 20
	    } else if (enemy instanceof Num8) {
	        setScore(getScore() + 25);  // For Num8, increase score by 25
	    }
	}
	
};