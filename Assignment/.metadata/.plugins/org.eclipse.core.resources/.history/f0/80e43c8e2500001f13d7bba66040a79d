package Assignment.Game;

import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.geometry.Rectangle2D;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Screen;
import javafx.stage.Stage;
import javafx.scene.input.KeyEvent;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Random;

public class Game extends Application {
    private static final int TILE_SIZE = 40;
    private static int NUM_TILES_X = 20;
    private static int NUM_TILES_Y = 15;
    private static final int NUM_NUM1_INSTANCES = 10;

    private static int[][] maze = new int[NUM_TILES_X][NUM_TILES_Y];
    Pane root;
    Scene scene;
    Canvas canvas;
    GraphicsContext gc;
    AnimationTimer timer;
    Factory factory;
    ArrayList<Enemy> enemyList = new ArrayList<>();
    private ArrayList<Bullet> bullets = new ArrayList<>();
    Player player;
    private Class<? extends Bullet> currentBulletType = Pow0Bullet.class;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        Rectangle2D screenBounds = Screen.getPrimary().getVisualBounds();    
        root = new Pane();
        canvas = new Canvas(screenBounds.getWidth(), screenBounds.getHeight());
        scene = new Scene(root, screenBounds.getWidth(), screenBounds.getHeight());
        gc = canvas.getGraphicsContext2D();
        primaryStage.setScene(scene);
        primaryStage.setFullScreen(true);
        primaryStage.show();

        NUM_TILES_X = (int) (canvas.getWidth() / TILE_SIZE);
        NUM_TILES_Y = (int) (canvas.getHeight() / TILE_SIZE);
        maze = new int[NUM_TILES_X][NUM_TILES_Y];

        generateMap();

        double playerInitialX, playerInitialY;
        do {
            int randomX = (int) (Math.random() * NUM_TILES_X);
            int randomY = (int) (Math.random() * NUM_TILES_Y);
            playerInitialX = randomX * TILE_SIZE + TILE_SIZE / 2;
            playerInitialY = randomY * TILE_SIZE + TILE_SIZE / 2;
        } while (!isValidSpawnPosition(playerInitialX, playerInitialY));

        player = Player.getInstance(this, gc);
        root.getChildren().add(canvas);
        gc.setFill(Color.BLACK);
        gc.fillRect(0, 0, canvas.getWidth(), canvas.getHeight());
        factory = new Factory(gc);
        spawnEnemies();

        timer = new AnimationTimer() {
            @Override
            public void handle(long now) {
                gc.clearRect(0, 0, canvas.getWidth(), canvas.getHeight());
                for (Enemy enemy : enemyList) {
                    enemy.update();
                    enemy.enemyMovement();
                    if (playerCollidesWithEnemy(player, enemy)) {
                        player.decrementLives();
                    }
                }
                player.update();
                updateBullets();
            }
        };
        timer.start();
        scene.setOnKeyPressed(this::handleKeyPress);
    }

    private void handleKeyPress(KeyEvent e) {
        switch (e.getCode()) {
            case NUMPAD0: currentBulletType = Pow0Bullet.class; break;
            case NUMPAD1: currentBulletType = Pow1Bullet.class; break;
            case NUMPAD2: currentBulletType = Pow2Bullet.class; break;
            case NUMPAD3: currentBulletType = Pow3Bullet.class; break;
            case LEFT:
            case KP_LEFT: player.moveLeft(); break;
            case RIGHT:
            case KP_RIGHT: player.moveRight(); break;
            case UP:
            case KP_UP: player.moveUp(); break;
            case DOWN:
            case KP_DOWN: player.moveDown(); break;
            case SPACE: fireBullet(); break;
            default: break;
        }
    }

    private void updateBullets() {
        Iterator<Bullet> bulletIterator = bullets.iterator();
        while (bulletIterator.hasNext()) {
            Bullet bullet = bulletIterator.next();
            bullet.shoot();
            if (isBulletOffScreen(bullet) || isWall(bullet.getX(), bullet.getY())) {
                bulletIterator.remove();
            } else {
                Iterator<Enemy> enemyIterator = enemyList.iterator();
                while (enemyIterator.hasNext()) {
                    Enemy enemy = enemyIterator.next();
                    if (collidesWith(bullet, enemy) && canKill(bullet, enemy)) {
                        enemyIterator.remove();
                        bulletIterator.remove();
                        break;
                    }
                }
            }
        }
    }

    private void generateMap() {
        for (int i = 0; i < NUM_TILES_X; i++) {
            for (int j = 0; j < NUM_TILES_Y; j++) {
                maze[i][j] = 1;
            }
        }
        Random rand = new Random();
        int startX = rand.nextInt(NUM_TILES_X);
        int startY = rand.nextInt(NUM_TILES_Y);
        maze[startX][startY] = 0;
        ArrayList<int[]> walls = new ArrayList<>();
        addWalls(startX, startY, walls);
        while (!walls.isEmpty()) {
            int[] wall = walls.remove(rand.nextInt(walls.size()));
            if (createPath(wall)) {
                addWalls(wall[0], wall[1], walls);
            }
        }
        drawMaze();
    }

    private void addWalls(int x, int y, ArrayList<int[]> walls) {
        int[] dX = {-1, 1, 0, 0};
        int[] dY = {0, 0, -1, 1};
        for (int i = 0; i < 4; i++) {
            int nx = x + dX[i];
            int ny = y + dY[i];
            if (nx >= 0 && nx < NUM_TILES_X && ny >= 0 && ny < NUM_TILES_Y && maze[nx][ny] == 1) {
                walls.add(new int[]{nx, ny});
            }
        }
    }

    private boolean createPath(int[] wall) {
        int x = wall[0];
        int y = wall[1];
        int[] dX = {-1, 1, 0, 0};
        int[] dY = {0, 0, -1, 1};
        int cellsWithPaths = 0;
        int[] cell = {-1, -1};
        for (int k = 0; k < 4; k++) {
            int nx = x + dX[k];
            int ny = y + dY[k];
            if (nx >= 0 && nx < NUM_TILES_X && ny >= 0 && ny < NUM_TILES_Y && maze[nx][ny] == 0) {
                cellsWithPaths++;
                if (cellsWithPaths == 1) {
                    cell[0] = nx;
                    cell[1] = ny;
                } else {
                    break;
                }
            }
        }
        if (cellsWithPaths == 1) {
            maze[x][y] = 0;
            return true;
        }
        return false;
    }

    private void drawMaze() {
        for (int ix = 0; ix < NUM_TILES_X; ix++) {
            for (int jy = 0; jy < NUM_TILES_Y; jy++) {
                Rectangle tile = new Rectangle(ix * TILE_SIZE, jy * TILE_SIZE, TILE_SIZE, TILE_SIZE);
                tile.setFill(maze[ix][jy] == 1 ? Color.DARKSLATEBLUE : Color.BLACK);
                root.getChildren().add(tile);
            }
        }
    }

    public boolean isValidSpawnPosition(double posX, double posY) {
        int gridX = (int) (posX / TILE_SIZE);
        int gridY = (int) (posY / TILE_SIZE);
        return gridX >= 0 && gridX < NUM_TILES_X && gridY >= 0 && gridY < NUM_TILES_Y && maze[gridX][gridY] == 0 && !isOccupied(posX, posY);
    }

    private boolean isOccupied(double posX, double posY) {
        for (Enemy enemy : enemyList) {
            double distance = Math.sqrt(Math.pow((enemy.getX() - posX), 2) + Math.pow((enemy.getY() - posY), 2));
            return distance < 3 * TILE_SIZE;
        }
        return false;
    }

    private boolean isBulletOffScreen(Bullet bullet) {
        double x = bullet.getX();
        double y = bullet.getY();
        return x < 0 || x > canvas.getWidth() || y < 0 || y > canvas.getHeight();
    }

    private void fireBullet() {
        double x = player.getX();
        double y = player.getY();
        Bullet bullet = Bullet.builder().setPosition(x, y).setGraphicsContext(gc).setBulletType(currentBulletType).build();
        if (bullet != null) {
            bullets.add(bullet);
        }
    }

    protected boolean isWall(double x, double y) {
        int gridX = (int) (x / TILE_SIZE);
        int gridY = (int) (y / TILE_SIZE);
        return gridX >= 0 && gridX < NUM_TILES_X && gridY >= 0 && gridY < NUM_TILES_Y && maze[gridX][gridY] == 1;
    }

    private boolean collidesWith(Bullet bullet, Enemy enemy) {
        return bullet.getX() < enemy.getX() + enemy.getWidth() && bullet.getX() + bullet.getWidth() > enemy.getX() && bullet.getY() < enemy.getY() + enemy.getHeight() && bullet.getY() + bullet.getHeight() > enemy.getY();
    }

    private void spawnEnemies() {
        String[] types = {"num1", "num2", "num4", "num8"};
        Random random = new Random();
        for (int i = 0; i < NUM_NUM1_INSTANCES; i++) {
            double x, y;
            do {
                int gridX = random.nextInt(NUM_TILES_X);
                int gridY = random.nextInt(NUM_TILES_Y);
                x = gridX * TILE_SIZE + TILE_SIZE / 2;
                y = gridY * TILE_SIZE + TILE_SIZE / 2;
            } while (!isValidSpawnPosition(x, y));
            Enemy enemy = factory.createProduct(types[random.nextInt(types.length)], this, x, y, TILE_SIZE);
            if (enemy != null) {
                enemyList.add(enemy);
            }
        }
    }

    private boolean canKill(Bullet bullet, Enemy enemy) {
        return (bullet instanceof Pow0Bullet && enemy instanceof Num1) || (bullet instanceof Pow1Bullet && enemy instanceof Num2) || (bullet instanceof Pow2Bullet && enemy instanceof Num4) || (bullet instanceof Pow3Bullet && enemy instanceof Num8);
    }

    private boolean playerCollidesWithEnemy(Player player, Enemy enemy) {
        return player.getX() < enemy.getX() + enemy.getWidth() && player.getX() + player.getWidth() > enemy.getX() && player.getY() < enemy.getY() + enemy.getHeight() && player.getY() + player.getHeight() > enemy.getY();
    }
}
